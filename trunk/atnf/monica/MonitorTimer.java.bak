/**
 * Class: MonitorTimer
 * Description: A simple threaded Timer
 * There is an approx. 30ms delay in the construction of the first
 * instance of this object
 * @author Le Cuong Nguyen
 **/
package atnf.atoms.mon;

import java.awt.event.*;
import javax.swing.event.*;
import java.util.*;

public class MonitorTimer
{
   private long itsPeriod;
   private long itsStarted;
   private EventListenerList itsListeners = new EventListenerList();
   private boolean itsRepeats = false;
   private static Timer itsTimer = new Timer(true);
   private TimerRunner itsRunner = null;
   private boolean itsRunning = false;
         
   /**
    * The period (in ms) of this Timer
    **/
   public long getPeriod()
   {
      return itsPeriod;
   }
   
   /**
    * When this Timer was started using standard Java time conventions
    **/
   public long getStartedTime()
   {
      return itsStarted;
   }

   /**
    * The time of this Timer will run next
    **/
   public long getNextExecTime()
   {
      return itsStarted + itsPeriod;
   }
   
   /**
    * Should this Timer restart after firing?
    **/
   public boolean getRepeats()
   {
      return itsRepeats;
   }
   
   /**
    * Sets the period
    **/
   public void setPeriod(int period)
   {
      itsPeriod = (long)period;
   }

   /**
    * Sets the period
    **/
   public void setPeriod(long period)
   {
      itsPeriod = period;
   }
   
   /**
    * Mainly intended for internal use, but you can specify when the
    * Timer started.
    **/
   public void setStartedTime(long start)
   {
      itsStarted = start;
   }

   /**
    * Which method to run when Timer is fired?
    **/
   public void addActionListener(ActionListener listener)
   {
      itsListeners.add(ActionListener.class, listener);
   }

   /**
    * Don't run this actionListener when Timer is fired anymore
    **/
   public void removeActionListener(ActionListener listener)
   {
      itsListeners.remove(ActionListener.class, listener);
   }

   /**
    * Fire an event, do the stuff in the listeners
    **/
   public void fireActionEvent(ActionEvent ae)
   {
      Object[] listeners = itsListeners.getListenerList();
      for (int i = 0; i < listeners.length; i +=2)
         if (listeners[i] == ActionListener.class)
	    ((ActionListener)listeners[i+1]).actionPerformed(ae);
   }
   
   /**
    * Tells the timer to reset after firing
    **/
   public void setRepeats(boolean repeats)
   {
      itsRepeats = repeats;
   }
   
   /**
    * New Timer with defaults - Repeats: false, no period, no listeners
    **/
   public MonitorTimer()
   {
   }

   /**
    * Uses a similar constructor to the javax.swing.Timer, so that you can
    * simply find/replace them.
    **/
   public MonitorTimer(int period, ActionListener listener)
   {
      itsPeriod = period;
      addActionListener(listener);
   }

   /**
    * The full constructor.
    **/
   public MonitorTimer(int period, ActionListener listener, boolean repeats)
   {
      itsPeriod = period;
      addActionListener(listener);
      itsRepeats = repeats;
   }
   
   /**
    * Puts the timer into the queue, starts it. Use when Timer has not
    * been fully initialised
    **/
   public synchronized void start(int period, ActionListener listener)
   {
      if (itsRunner != null) return;
      itsPeriod = period;
      addActionListener(listener);
      start();
   }
   
   /**
    * starts the Timer
    **/
   public synchronized void start()
   {
      if (itsRunner == null) itsRunner = new TimerRunner(this);
      if (!itsRunning) itsTimer.schedule(itsRunner, itsPeriod);
      itsRunning = true;
   }
   
   /**
    * Removes the timer
    **/
   public synchronized void stop()
   {
      if (itsRunning && itsRunner != null) {
	 itsRunner.cancel();
	 itsRunner = null;
      }
      itsRunning = false;
   }
}

class TimerRunner extends TimerTask
{
   private MonitorTimer itsParent = null;

   public TimerRunner(MonitorTimer parent)
   {
      itsParent = parent;
   }

   public void run()
   {
      itsParent.stop();
      itsParent.fireActionEvent(null);
      if (itsParent.getRepeats()) itsParent.start();
   }
}
