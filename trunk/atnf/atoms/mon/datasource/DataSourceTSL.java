// Copyright (C) Oz Forecast, NSW, Australia.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.

package atnf.atoms.mon.datasource;

import java.util.*;
import java.io.*;
import atnf.atoms.time.*;
import atnf.atoms.mon.*;

/**
 * Parses data from a DS1820 based temperature logger board designed
 * by James Cameron using a modified version of his TSL C program to
 * read the data from the serial port.
 *
 * <P>Takes up to five colon-delimited arguments:<BR>
 * <bl>
 * <li><b>Device:</b> Serial device to access the data.
 * <li><b>Temp1:</b> Full monitor point name for 1st temp sensor, or 'null'.
 * <li><b>Temp2:</b> Full monitor point name for 2nd temp sensor, or 'null'.
 * <li><b>Temp3:</b> Full monitor point name for 3rd temp sensor, or 'null'.
 * <li><b>Temp4:</b> Full monitor point name for 4th temp sensor, or 'null'.
 *
 * <P>See http://quozl.us.netrek.org/ts/ I bought my board as kit K145 from
 * http://www.ozitronics.com/ but it looks like there are lots of compatible
 * kits available.
 *
 * <P>Uses the <i>timeout</i> program when invoking tsl.
 *
 * @author David Brodrick
 * @version $Id: $
 **/
public class DataSourceTSL
extends DataSource
{
  /** Serial device to use as argument for TSL. */
  String itsDevice;
  
  /** Array of monitor point names for the four sensors. */
  String[] itsTempNames = new String[4];
  
  public DataSourceTSL(String arg)
  {
    super("tsl"+arg.split(":")[0]+"home");
    String[] args = arg.split(":");
    
    itsDevice="/dev/ttyS" + args[0];
    
    for (int i=0; i<4; i++) {
      if (args.length>i+1 && args[i+1]!="null") itsTempNames[i]=args[i+1];
      else itsTempNames[i]=null;
    }
  }

  /** Read new data from 'tsl' and update monitor points. */
  protected
  void
  getData(Object[] points)
  throws Exception
  {
    AbsTime samptime=new AbsTime();
    Process p = Runtime.getRuntime().exec("timeout 5 tsl " + itsDevice);
            
    BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
    BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));
    
    String s = stdError.readLine();
    if (s!=null) {
      System.err.println("DataSourceTSL: Bad data from 'tsl': " + s);
      throw new Exception(s);
    }
    
    String line = stdInput.readLine();
    String[] temps = line.split("\t");
    if (temps.length!=4) {
      System.err.println("DataSourceTSL: Bad data from 'tsl': " + line);
      throw new Exception("DataSourceTSL: Bad data from 'tsl': " + line);
    }
    
    for (int i=0; i<4; i++) {
      if (itsTempNames[i]==null) continue;
      
      //Read this temperature from the string generated by tsl
      Double newdata;
      try {
        newdata=new Double(temps[i]);
      } catch (Exception e) {
        newdata=null;
      }
      System.err.println(itsTempNames[i] + "\t" + newdata);

      PointMonitor pm = MonitorMap.getPointMonitor(itsTempNames[i]);
      if (pm!=null) {
        PointData pd=new PointData(itsTempNames[i], samptime, newdata);
        System.err.println(pd.toString());
        pm.firePointEvent(new PointEvent(this, pd, true));
      }
    }
  }

  public final static
  void
  main(String[] argv)
  {
     DataSourceTSL tsl = new DataSourceTSL("2:home.temps.t1:home.temps.t2:home.temps.t3:home.temps.t4");

     while (true) {
       try {
         tsl.getData(null);
         RelTime.factory(5000000).sleep();
       } catch (Exception e) {}
     }
  }

}
