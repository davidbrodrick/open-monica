// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package atnf.atoms.mon.comms;

// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class PubSubControlPrxHelper extends Ice.ObjectPrxHelperBase implements PubSubControlPrx
{
    public void
    keepalive(String topicname)
    {
        keepalive(topicname, null, false);
    }

    public void
    keepalive(String topicname, java.util.Map<String, String> __ctx)
    {
        keepalive(topicname, __ctx, true);
    }

    private void
    keepalive(String topicname, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _PubSubControlDel __del = (_PubSubControlDel)__delBase;
                __del.keepalive(topicname, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __keepalive_name = "keepalive";

    public Ice.AsyncResult begin_keepalive(String topicname)
    {
        return begin_keepalive(topicname, null, false, null);
    }

    public Ice.AsyncResult begin_keepalive(String topicname, java.util.Map<String, String> __ctx)
    {
        return begin_keepalive(topicname, __ctx, true, null);
    }

    public Ice.AsyncResult begin_keepalive(String topicname, Ice.Callback __cb)
    {
        return begin_keepalive(topicname, null, false, __cb);
    }

    public Ice.AsyncResult begin_keepalive(String topicname, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_keepalive(topicname, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_keepalive(String topicname, Callback_PubSubControl_keepalive __cb)
    {
        return begin_keepalive(topicname, null, false, __cb);
    }

    public Ice.AsyncResult begin_keepalive(String topicname, java.util.Map<String, String> __ctx, Callback_PubSubControl_keepalive __cb)
    {
        return begin_keepalive(topicname, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_keepalive(String topicname, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __keepalive_name, __cb);
        try
        {
            __result.__prepare(__keepalive_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(topicname);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_keepalive(Ice.AsyncResult __result)
    {
        __end(__result, __keepalive_name);
    }

    public void
    subscribe(PubSubRequest req)
    {
        subscribe(req, null, false);
    }

    public void
    subscribe(PubSubRequest req, java.util.Map<String, String> __ctx)
    {
        subscribe(req, __ctx, true);
    }

    private void
    subscribe(PubSubRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _PubSubControlDel __del = (_PubSubControlDel)__delBase;
                __del.subscribe(req, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __subscribe_name = "subscribe";

    public Ice.AsyncResult begin_subscribe(PubSubRequest req)
    {
        return begin_subscribe(req, null, false, null);
    }

    public Ice.AsyncResult begin_subscribe(PubSubRequest req, java.util.Map<String, String> __ctx)
    {
        return begin_subscribe(req, __ctx, true, null);
    }

    public Ice.AsyncResult begin_subscribe(PubSubRequest req, Ice.Callback __cb)
    {
        return begin_subscribe(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(PubSubRequest req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_subscribe(req, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_subscribe(PubSubRequest req, Callback_PubSubControl_subscribe __cb)
    {
        return begin_subscribe(req, null, false, __cb);
    }

    public Ice.AsyncResult begin_subscribe(PubSubRequest req, java.util.Map<String, String> __ctx, Callback_PubSubControl_subscribe __cb)
    {
        return begin_subscribe(req, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_subscribe(PubSubRequest req, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __subscribe_name, __cb);
        try
        {
            __result.__prepare(__subscribe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            req.__write(__os);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_subscribe(Ice.AsyncResult __result)
    {
        __end(__result, __subscribe_name);
    }

    public void
    unsubscribe(String topicname)
    {
        unsubscribe(topicname, null, false);
    }

    public void
    unsubscribe(String topicname, java.util.Map<String, String> __ctx)
    {
        unsubscribe(topicname, __ctx, true);
    }

    private void
    unsubscribe(String topicname, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _PubSubControlDel __del = (_PubSubControlDel)__delBase;
                __del.unsubscribe(topicname, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __unsubscribe_name = "unsubscribe";

    public Ice.AsyncResult begin_unsubscribe(String topicname)
    {
        return begin_unsubscribe(topicname, null, false, null);
    }

    public Ice.AsyncResult begin_unsubscribe(String topicname, java.util.Map<String, String> __ctx)
    {
        return begin_unsubscribe(topicname, __ctx, true, null);
    }

    public Ice.AsyncResult begin_unsubscribe(String topicname, Ice.Callback __cb)
    {
        return begin_unsubscribe(topicname, null, false, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(String topicname, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_unsubscribe(topicname, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(String topicname, Callback_PubSubControl_unsubscribe __cb)
    {
        return begin_unsubscribe(topicname, null, false, __cb);
    }

    public Ice.AsyncResult begin_unsubscribe(String topicname, java.util.Map<String, String> __ctx, Callback_PubSubControl_unsubscribe __cb)
    {
        return begin_unsubscribe(topicname, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_unsubscribe(String topicname, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __unsubscribe_name, __cb);
        try
        {
            __result.__prepare(__unsubscribe_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(topicname);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_unsubscribe(Ice.AsyncResult __result)
    {
        __end(__result, __unsubscribe_name);
    }

    public static PubSubControlPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PubSubControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::atnf::atoms::mon::comms::PubSubControl"))
                {
                    PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PubSubControlPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PubSubControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::atnf::atoms::mon::comms::PubSubControl", __ctx))
                {
                    PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static PubSubControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::atnf::atoms::mon::comms::PubSubControl"))
                {
                    PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PubSubControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::atnf::atoms::mon::comms::PubSubControl", __ctx))
                {
                    PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static PubSubControlPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (PubSubControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static PubSubControlPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        PubSubControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            PubSubControlPrxHelper __h = new PubSubControlPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _PubSubControlDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _PubSubControlDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, PubSubControlPrx v)
    {
        __os.writeProxy(v);
    }

    public static PubSubControlPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PubSubControlPrxHelper result = new PubSubControlPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
