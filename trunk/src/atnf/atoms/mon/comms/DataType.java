// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package atnf.atoms.mon.comms;

public enum DataType implements java.io.Serializable
{
    
    DTNull(0),
    
    DTFloat(1),
    
    DTDouble(2),
    
    DTInt(3),
    
    DTLong(4),
    
    DTString(5),
    
    DTBoolean(6),
    
    DTAbsTime(7),
    
    DTRelTime(8),
    
    DTAngle(9);

    public int
    value()
    {
        return __value;
    }

    public static DataType
    valueOf(int __v)
    {
        switch(__v)
        {
        case 0:
            return DTNull;
        case 1:
            return DTFloat;
        case 2:
            return DTDouble;
        case 3:
            return DTInt;
        case 4:
            return DTLong;
        case 5:
            return DTString;
        case 6:
            return DTBoolean;
        case 7:
            return DTAbsTime;
        case 8:
            return DTRelTime;
        case 9:
            return DTAngle;
        }
        return null;
    }

    private
    DataType(int __v)
    {
        __value = __v;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeEnum(value(), 9);
    }

    public static DataType
    __read(IceInternal.BasicStream __is)
    {
        int __v = __is.readEnum(9);
        return __validate(__v);
    }

    private static DataType
    __validate(int __v)
    {
        final DataType __e = valueOf(__v);
        if(__e == null)
        {
            throw new Ice.MarshalException("enumerator value " + __v + " is out of range");
        }
        return __e;
    }

    private final int __value;
}
