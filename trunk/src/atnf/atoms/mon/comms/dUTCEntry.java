// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package atnf.atoms.mon.comms;

public class dUTCEntry implements java.lang.Cloneable, java.io.Serializable
{
    public long epoch;

    public int dUTC;

    public dUTCEntry()
    {
    }

    public dUTCEntry(long epoch, int dUTC)
    {
        this.epoch = epoch;
        this.dUTC = dUTC;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        dUTCEntry _r = null;
        if(rhs instanceof dUTCEntry)
        {
            _r = (dUTCEntry)rhs;
        }

        if(_r != null)
        {
            if(epoch != _r.epoch)
            {
                return false;
            }
            if(dUTC != _r.dUTC)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::atnf::atoms::mon::comms::dUTCEntry");
        __h = IceInternal.HashUtil.hashAdd(__h, epoch);
        __h = IceInternal.HashUtil.hashAdd(__h, dUTC);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(epoch);
        __os.writeInt(dUTC);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        epoch = __is.readLong();
        dUTC = __is.readInt();
    }

    public static final long serialVersionUID = 1116965966266075684L;
}
