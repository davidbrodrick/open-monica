// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.0

package atnf.atoms.mon.comms;

// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


public final class MoniCAIcePrxHelper extends Ice.ObjectPrxHelperBase implements MoniCAIcePrx
{
    public boolean
    addPoints(PointDescriptionIce[] newpoints, String username, String passwd)
    {
        return addPoints(newpoints, username, passwd, null, false);
    }

    public boolean
    addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return addPoints(newpoints, username, passwd, __ctx, true);
    }

    private boolean
    addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addPoints");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.addPoints(newpoints, username, passwd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addPoints_name = "addPoints";

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Ice.Callback __cb)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Callback_MoniCAIce_addPoints __cb)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addPoints __cb)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addPoints_name, __cb);
        try
        {
            __result.__prepare(__addPoints_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            pointarrayHelper.write(__os, newpoints);
            __os.writeString(username);
            __os.writeString(passwd);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_addPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addPoints_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    addSetup(String setup, String username, String passwd)
    {
        return addSetup(setup, username, passwd, null, false);
    }

    public boolean
    addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return addSetup(setup, username, passwd, __ctx, true);
    }

    private boolean
    addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("addSetup");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.addSetup(setup, username, passwd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __addSetup_name = "addSetup";

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd)
    {
        return begin_addSetup(setup, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Ice.Callback __cb)
    {
        return begin_addSetup(setup, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Callback_MoniCAIce_addSetup __cb)
    {
        return begin_addSetup(setup, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addSetup __cb)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSetup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSetup_name, __cb);
        try
        {
            __result.__prepare(__addSetup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(setup);
            __os.writeString(username);
            __os.writeString(passwd);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_addSetup(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addSetup_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public String[]
    getAllPointNames()
    {
        return getAllPointNames(null, false);
    }

    public String[]
    getAllPointNames(java.util.Map<String, String> __ctx)
    {
        return getAllPointNames(__ctx, true);
    }

    private String[]
    getAllPointNames(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAllPointNames");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getAllPointNames(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAllPointNames_name = "getAllPointNames";

    public Ice.AsyncResult begin_getAllPointNames()
    {
        return begin_getAllPointNames(null, false, null);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx)
    {
        return begin_getAllPointNames(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPointNames(Ice.Callback __cb)
    {
        return begin_getAllPointNames(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPointNames(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(Callback_MoniCAIce_getAllPointNames __cb)
    {
        return begin_getAllPointNames(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointNames __cb)
    {
        return begin_getAllPointNames(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPointNames_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPointNames_name, __cb);
        try
        {
            __result.__prepare(__getAllPointNames_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getAllPointNames(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPointNames_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = stringarrayHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public PointDescriptionIce[]
    getAllPoints()
    {
        return getAllPoints(null, false);
    }

    public PointDescriptionIce[]
    getAllPoints(java.util.Map<String, String> __ctx)
    {
        return getAllPoints(__ctx, true);
    }

    private PointDescriptionIce[]
    getAllPoints(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAllPoints");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getAllPoints(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAllPoints_name = "getAllPoints";

    public Ice.AsyncResult begin_getAllPoints()
    {
        return begin_getAllPoints(null, false, null);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx)
    {
        return begin_getAllPoints(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPoints(Ice.Callback __cb)
    {
        return begin_getAllPoints(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPoints(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(Callback_MoniCAIce_getAllPoints __cb)
    {
        return begin_getAllPoints(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPoints __cb)
    {
        return begin_getAllPoints(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPoints_name, __cb);
        try
        {
            __result.__prepare(__getAllPoints_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDescriptionIce[] end_getAllPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPoints_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PointDescriptionIce[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = pointarrayHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public String[]
    getAllSetups()
    {
        return getAllSetups(null, false);
    }

    public String[]
    getAllSetups(java.util.Map<String, String> __ctx)
    {
        return getAllSetups(__ctx, true);
    }

    private String[]
    getAllSetups(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAllSetups");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getAllSetups(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAllSetups_name = "getAllSetups";

    public Ice.AsyncResult begin_getAllSetups()
    {
        return begin_getAllSetups(null, false, null);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx)
    {
        return begin_getAllSetups(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllSetups(Ice.Callback __cb)
    {
        return begin_getAllSetups(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllSetups(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(Callback_MoniCAIce_getAllSetups __cb)
    {
        return begin_getAllSetups(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllSetups __cb)
    {
        return begin_getAllSetups(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllSetups_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllSetups_name, __cb);
        try
        {
            __result.__prepare(__getAllSetups_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getAllSetups(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllSetups_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = stringarrayHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public PointDataIce[][]
    getArchiveData(String[] names, long start, long end, long maxsamples)
    {
        return getArchiveData(names, start, end, maxsamples, null, false);
    }

    public PointDataIce[][]
    getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx)
    {
        return getArchiveData(names, start, end, maxsamples, __ctx, true);
    }

    private PointDataIce[][]
    getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getArchiveData");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getArchiveData(names, start, end, maxsamples, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getArchiveData_name = "getArchiveData";

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, null);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Ice.Callback __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Callback_MoniCAIce_getArchiveData __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getArchiveData __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getArchiveData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getArchiveData_name, __cb);
        try
        {
            __result.__prepare(__getArchiveData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            stringarrayHelper.write(__os, names);
            __os.writeLong(start);
            __os.writeLong(end);
            __os.writeLong(maxsamples);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[][] end_getArchiveData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getArchiveData_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PointDataIce[][] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = pointdatasetarrayHelper.read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public long
    getCurrentTime()
    {
        return getCurrentTime(null, false);
    }

    public long
    getCurrentTime(java.util.Map<String, String> __ctx)
    {
        return getCurrentTime(__ctx, true);
    }

    private long
    getCurrentTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCurrentTime");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getCurrentTime(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getCurrentTime_name = "getCurrentTime";

    public Ice.AsyncResult begin_getCurrentTime()
    {
        return begin_getCurrentTime(null, false, null);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx)
    {
        return begin_getCurrentTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCurrentTime(Ice.Callback __cb)
    {
        return begin_getCurrentTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCurrentTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(Callback_MoniCAIce_getCurrentTime __cb)
    {
        return begin_getCurrentTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getCurrentTime __cb)
    {
        return begin_getCurrentTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCurrentTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCurrentTime_name, __cb);
        try
        {
            __result.__prepare(__getCurrentTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_getCurrentTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCurrentTime_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        long __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readLong();
        __is.endReadEncaps();
        return __ret;
    }

    public PointDataIce[]
    getData(String[] names)
    {
        return getData(names, null, false);
    }

    public PointDataIce[]
    getData(String[] names, java.util.Map<String, String> __ctx)
    {
        return getData(names, __ctx, true);
    }

    private PointDataIce[]
    getData(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getData");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getData(names, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getData_name = "getData";

    public Ice.AsyncResult begin_getData(String[] names)
    {
        return begin_getData(names, null, false, null);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx)
    {
        return begin_getData(names, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getData(String[] names, Ice.Callback __cb)
    {
        return begin_getData(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getData(names, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, Callback_MoniCAIce_getData __cb)
    {
        return begin_getData(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getData __cb)
    {
        return begin_getData(names, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getData_name, __cb);
        try
        {
            __result.__prepare(__getData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            stringarrayHelper.write(__os, names);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[] end_getData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getData_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PointDataIce[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = pointdatasetHelper.read(__is);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret;
    }

    public String[]
    getEncryptionInfo()
    {
        return getEncryptionInfo(null, false);
    }

    public String[]
    getEncryptionInfo(java.util.Map<String, String> __ctx)
    {
        return getEncryptionInfo(__ctx, true);
    }

    private String[]
    getEncryptionInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getEncryptionInfo");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getEncryptionInfo(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getEncryptionInfo_name = "getEncryptionInfo";

    public Ice.AsyncResult begin_getEncryptionInfo()
    {
        return begin_getEncryptionInfo(null, false, null);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getEncryptionInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(Ice.Callback __cb)
    {
        return begin_getEncryptionInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getEncryptionInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(Callback_MoniCAIce_getEncryptionInfo __cb)
    {
        return begin_getEncryptionInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getEncryptionInfo __cb)
    {
        return begin_getEncryptionInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getEncryptionInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getEncryptionInfo_name, __cb);
        try
        {
            __result.__prepare(__getEncryptionInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getEncryptionInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getEncryptionInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = stringarrayHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public PointDescriptionIce[]
    getPoints(String[] names)
    {
        return getPoints(names, null, false);
    }

    public PointDescriptionIce[]
    getPoints(String[] names, java.util.Map<String, String> __ctx)
    {
        return getPoints(names, __ctx, true);
    }

    private PointDescriptionIce[]
    getPoints(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getPoints");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.getPoints(names, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getPoints_name = "getPoints";

    public Ice.AsyncResult begin_getPoints(String[] names)
    {
        return begin_getPoints(names, null, false, null);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx)
    {
        return begin_getPoints(names, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, Ice.Callback __cb)
    {
        return begin_getPoints(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPoints(names, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, Callback_MoniCAIce_getPoints __cb)
    {
        return begin_getPoints(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getPoints __cb)
    {
        return begin_getPoints(names, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPoints_name, __cb);
        try
        {
            __result.__prepare(__getPoints_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            stringarrayHelper.write(__os, names);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDescriptionIce[] end_getPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPoints_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        PointDescriptionIce[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = pointarrayHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public boolean
    setData(String[] names, PointDataIce[] rawvalues, String username, String passwd)
    {
        return setData(names, rawvalues, username, passwd, null, false);
    }

    public boolean
    setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return setData(names, rawvalues, username, passwd, __ctx, true);
    }

    private boolean
    setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setData");
                __delBase = __getDelegate(false);
                _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                return __del.setData(names, rawvalues, username, passwd, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setData_name = "setData";

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd)
    {
        return begin_setData(names, rawvalues, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_setData(names, rawvalues, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, Ice.Callback __cb)
    {
        return begin_setData(names, rawvalues, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setData(names, rawvalues, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, Callback_MoniCAIce_setData __cb)
    {
        return begin_setData(names, rawvalues, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_setData __cb)
    {
        return begin_setData(names, rawvalues, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setData(String[] names, PointDataIce[] rawvalues, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setData_name, __cb);
        try
        {
            __result.__prepare(__setData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            stringarrayHelper.write(__os, names);
            pointdatasetHelper.write(__os, rawvalues);
            __os.writeString(username);
            __os.writeString(passwd);
            __os.writePendingObjects();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setData_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static MoniCAIcePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MoniCAIcePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::atnf::atoms::mon::comms::MoniCAIce"))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MoniCAIcePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MoniCAIcePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::atnf::atoms::mon::comms::MoniCAIce", __ctx))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MoniCAIcePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::atnf::atoms::mon::comms::MoniCAIce"))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MoniCAIcePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::atnf::atoms::mon::comms::MoniCAIce", __ctx))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MoniCAIcePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MoniCAIcePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MoniCAIcePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _MoniCAIceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _MoniCAIceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, MoniCAIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MoniCAIcePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MoniCAIcePrxHelper result = new MoniCAIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
