// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package atnf.atoms.mon.comms;

public final class MoniCAIcePrxHelper extends Ice.ObjectPrxHelperBase implements MoniCAIcePrx
{
    private static final String __acknowledgeAlarms_name = "acknowledgeAlarms";

    public boolean acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd)
    {
        return acknowledgeAlarms(pointnames, ack, username, passwd, null, false);
    }

    public boolean acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return acknowledgeAlarms(pointnames, ack, username, passwd, __ctx, true);
    }

    private boolean acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "acknowledgeAlarms", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("acknowledgeAlarms");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.acknowledgeAlarms(pointnames, ack, username, passwd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, Ice.Callback __cb)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, Callback_MoniCAIce_acknowledgeAlarms __cb)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_acknowledgeAlarms __cb)
    {
        return begin_acknowledgeAlarms(pointnames, ack, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__acknowledgeAlarms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __acknowledgeAlarms_name, __cb);
        try
        {
            __result.__prepare(__acknowledgeAlarms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, pointnames);
            __os.writeBool(ack);
            __os.writeString(username);
            __os.writeString(passwd);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_acknowledgeAlarms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __acknowledgeAlarms_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __addPoints_name = "addPoints";

    public boolean addPoints(PointDescriptionIce[] newpoints, String username, String passwd)
    {
        return addPoints(newpoints, username, passwd, null, false);
    }

    public boolean addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return addPoints(newpoints, username, passwd, __ctx, true);
    }

    private boolean addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addPoints", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addPoints");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.addPoints(newpoints, username, passwd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Ice.Callback __cb)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Callback_MoniCAIce_addPoints __cb)
    {
        return begin_addPoints(newpoints, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addPoints __cb)
    {
        return begin_addPoints(newpoints, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addPoints_name, __cb);
        try
        {
            __result.__prepare(__addPoints_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            pointarrayHelper.write(__os, newpoints);
            __os.writeString(username);
            __os.writeString(passwd);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_addPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addPoints_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __addSetup_name = "addSetup";

    public boolean addSetup(String setup, String username, String passwd)
    {
        return addSetup(setup, username, passwd, null, false);
    }

    public boolean addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return addSetup(setup, username, passwd, __ctx, true);
    }

    private boolean addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSetup", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("addSetup");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.addSetup(setup, username, passwd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd)
    {
        return begin_addSetup(setup, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Ice.Callback __cb)
    {
        return begin_addSetup(setup, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Callback_MoniCAIce_addSetup __cb)
    {
        return begin_addSetup(setup, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addSetup __cb)
    {
        return begin_addSetup(setup, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__addSetup_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSetup_name, __cb);
        try
        {
            __result.__prepare(__addSetup_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(setup);
            __os.writeString(username);
            __os.writeString(passwd);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_addSetup(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __addSetup_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAfter_name = "getAfter";

    public PointDataIce[] getAfter(String[] names, long t)
    {
        return getAfter(names, t, null, false);
    }

    public PointDataIce[] getAfter(String[] names, long t, java.util.Map<String, String> __ctx)
    {
        return getAfter(names, t, __ctx, true);
    }

    private PointDataIce[] getAfter(String[] names, long t, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAfter", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAfter");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAfter(names, t, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t)
    {
        return begin_getAfter(names, t, null, false, null);
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx)
    {
        return begin_getAfter(names, t, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t, Ice.Callback __cb)
    {
        return begin_getAfter(names, t, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAfter(names, t, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t, Callback_MoniCAIce_getAfter __cb)
    {
        return begin_getAfter(names, t, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAfter __cb)
    {
        return begin_getAfter(names, t, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAfter_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAfter_name, __cb);
        try
        {
            __result.__prepare(__getAfter_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            __os.writeLong(t);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[] end_getAfter(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAfter_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDataIce[] __ret;
            __ret = pointdatasetHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllAlarms_name = "getAllAlarms";

    public AlarmIce[] getAllAlarms()
    {
        return getAllAlarms(null, false);
    }

    public AlarmIce[] getAllAlarms(java.util.Map<String, String> __ctx)
    {
        return getAllAlarms(__ctx, true);
    }

    private AlarmIce[] getAllAlarms(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllAlarms", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllAlarms");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllAlarms(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllAlarms()
    {
        return begin_getAllAlarms(null, false, null);
    }

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx)
    {
        return begin_getAllAlarms(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllAlarms(Ice.Callback __cb)
    {
        return begin_getAllAlarms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllAlarms(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllAlarms(Callback_MoniCAIce_getAllAlarms __cb)
    {
        return begin_getAllAlarms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllAlarms __cb)
    {
        return begin_getAllAlarms(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllAlarms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllAlarms_name, __cb);
        try
        {
            __result.__prepare(__getAllAlarms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public AlarmIce[] end_getAllAlarms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllAlarms_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            AlarmIce[] __ret;
            __ret = alarmarrayHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllPointNames_name = "getAllPointNames";

    public String[] getAllPointNames()
    {
        return getAllPointNames(null, false);
    }

    public String[] getAllPointNames(java.util.Map<String, String> __ctx)
    {
        return getAllPointNames(__ctx, true);
    }

    private String[] getAllPointNames(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllPointNames", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllPointNames");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllPointNames(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllPointNames()
    {
        return begin_getAllPointNames(null, false, null);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx)
    {
        return begin_getAllPointNames(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPointNames(Ice.Callback __cb)
    {
        return begin_getAllPointNames(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPointNames(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(Callback_MoniCAIce_getAllPointNames __cb)
    {
        return begin_getAllPointNames(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointNames __cb)
    {
        return begin_getAllPointNames(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPointNames_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPointNames_name, __cb);
        try
        {
            __result.__prepare(__getAllPointNames_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getAllPointNames(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPointNames_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = stringarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllPointNamesChunk_name = "getAllPointNamesChunk";

    public String[] getAllPointNamesChunk(int start, int num)
    {
        return getAllPointNamesChunk(start, num, null, false);
    }

    public String[] getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx)
    {
        return getAllPointNamesChunk(start, num, __ctx, true);
    }

    private String[] getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllPointNamesChunk", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllPointNamesChunk");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllPointNamesChunk(start, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num)
    {
        return begin_getAllPointNamesChunk(start, num, null, false, null);
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx)
    {
        return begin_getAllPointNamesChunk(start, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, Ice.Callback __cb)
    {
        return begin_getAllPointNamesChunk(start, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPointNamesChunk(start, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, Callback_MoniCAIce_getAllPointNamesChunk __cb)
    {
        return begin_getAllPointNamesChunk(start, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointNamesChunk __cb)
    {
        return begin_getAllPointNamesChunk(start, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPointNamesChunk_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPointNamesChunk_name, __cb);
        try
        {
            __result.__prepare(__getAllPointNamesChunk_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(start);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getAllPointNamesChunk(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPointNamesChunk_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = stringarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllPoints_name = "getAllPoints";

    public PointDescriptionIce[] getAllPoints()
    {
        return getAllPoints(null, false);
    }

    public PointDescriptionIce[] getAllPoints(java.util.Map<String, String> __ctx)
    {
        return getAllPoints(__ctx, true);
    }

    private PointDescriptionIce[] getAllPoints(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllPoints", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllPoints");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllPoints(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllPoints()
    {
        return begin_getAllPoints(null, false, null);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx)
    {
        return begin_getAllPoints(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPoints(Ice.Callback __cb)
    {
        return begin_getAllPoints(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPoints(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(Callback_MoniCAIce_getAllPoints __cb)
    {
        return begin_getAllPoints(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPoints __cb)
    {
        return begin_getAllPoints(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPoints_name, __cb);
        try
        {
            __result.__prepare(__getAllPoints_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDescriptionIce[] end_getAllPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPoints_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDescriptionIce[] __ret;
            __ret = pointarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllPointsChunk_name = "getAllPointsChunk";

    public PointDescriptionIce[] getAllPointsChunk(int start, int num)
    {
        return getAllPointsChunk(start, num, null, false);
    }

    public PointDescriptionIce[] getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx)
    {
        return getAllPointsChunk(start, num, __ctx, true);
    }

    private PointDescriptionIce[] getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllPointsChunk", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllPointsChunk");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllPointsChunk(start, num, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num)
    {
        return begin_getAllPointsChunk(start, num, null, false, null);
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx)
    {
        return begin_getAllPointsChunk(start, num, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, Ice.Callback __cb)
    {
        return begin_getAllPointsChunk(start, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllPointsChunk(start, num, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, Callback_MoniCAIce_getAllPointsChunk __cb)
    {
        return begin_getAllPointsChunk(start, num, null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointsChunk __cb)
    {
        return begin_getAllPointsChunk(start, num, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllPointsChunk_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllPointsChunk_name, __cb);
        try
        {
            __result.__prepare(__getAllPointsChunk_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeInt(start);
            __os.writeInt(num);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDescriptionIce[] end_getAllPointsChunk(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllPointsChunk_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDescriptionIce[] __ret;
            __ret = pointarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getAllSetups_name = "getAllSetups";

    public String[] getAllSetups()
    {
        return getAllSetups(null, false);
    }

    public String[] getAllSetups(java.util.Map<String, String> __ctx)
    {
        return getAllSetups(__ctx, true);
    }

    private String[] getAllSetups(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getAllSetups", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getAllSetups");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getAllSetups(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getAllSetups()
    {
        return begin_getAllSetups(null, false, null);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx)
    {
        return begin_getAllSetups(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getAllSetups(Ice.Callback __cb)
    {
        return begin_getAllSetups(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAllSetups(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(Callback_MoniCAIce_getAllSetups __cb)
    {
        return begin_getAllSetups(null, false, __cb);
    }

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllSetups __cb)
    {
        return begin_getAllSetups(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAllSetups_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAllSetups_name, __cb);
        try
        {
            __result.__prepare(__getAllSetups_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getAllSetups(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getAllSetups_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = stringarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getArchiveData_name = "getArchiveData";

    public PointDataIce[][] getArchiveData(String[] names, long start, long end, long maxsamples)
    {
        return getArchiveData(names, start, end, maxsamples, null, false);
    }

    public PointDataIce[][] getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx)
    {
        return getArchiveData(names, start, end, maxsamples, __ctx, true);
    }

    private PointDataIce[][] getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getArchiveData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getArchiveData");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getArchiveData(names, start, end, maxsamples, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, null);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Ice.Callback __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Callback_MoniCAIce_getArchiveData __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, null, false, __cb);
    }

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getArchiveData __cb)
    {
        return begin_getArchiveData(names, start, end, maxsamples, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getArchiveData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getArchiveData_name, __cb);
        try
        {
            __result.__prepare(__getArchiveData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            __os.writeLong(start);
            __os.writeLong(end);
            __os.writeLong(maxsamples);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[][] end_getArchiveData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getArchiveData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDataIce[][] __ret;
            __ret = pointdatasetarrayHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getBefore_name = "getBefore";

    public PointDataIce[] getBefore(String[] names, long t)
    {
        return getBefore(names, t, null, false);
    }

    public PointDataIce[] getBefore(String[] names, long t, java.util.Map<String, String> __ctx)
    {
        return getBefore(names, t, __ctx, true);
    }

    private PointDataIce[] getBefore(String[] names, long t, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getBefore", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getBefore");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getBefore(names, t, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t)
    {
        return begin_getBefore(names, t, null, false, null);
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx)
    {
        return begin_getBefore(names, t, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t, Ice.Callback __cb)
    {
        return begin_getBefore(names, t, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getBefore(names, t, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t, Callback_MoniCAIce_getBefore __cb)
    {
        return begin_getBefore(names, t, null, false, __cb);
    }

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getBefore __cb)
    {
        return begin_getBefore(names, t, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getBefore_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getBefore_name, __cb);
        try
        {
            __result.__prepare(__getBefore_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            __os.writeLong(t);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[] end_getBefore(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getBefore_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDataIce[] __ret;
            __ret = pointdatasetHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCurrentAlarms_name = "getCurrentAlarms";

    public AlarmIce[] getCurrentAlarms()
    {
        return getCurrentAlarms(null, false);
    }

    public AlarmIce[] getCurrentAlarms(java.util.Map<String, String> __ctx)
    {
        return getCurrentAlarms(__ctx, true);
    }

    private AlarmIce[] getCurrentAlarms(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCurrentAlarms", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCurrentAlarms");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getCurrentAlarms(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCurrentAlarms()
    {
        return begin_getCurrentAlarms(null, false, null);
    }

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx)
    {
        return begin_getCurrentAlarms(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCurrentAlarms(Ice.Callback __cb)
    {
        return begin_getCurrentAlarms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCurrentAlarms(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCurrentAlarms(Callback_MoniCAIce_getCurrentAlarms __cb)
    {
        return begin_getCurrentAlarms(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getCurrentAlarms __cb)
    {
        return begin_getCurrentAlarms(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCurrentAlarms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCurrentAlarms_name, __cb);
        try
        {
            __result.__prepare(__getCurrentAlarms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public AlarmIce[] end_getCurrentAlarms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCurrentAlarms_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            AlarmIce[] __ret;
            __ret = alarmarrayHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getCurrentTime_name = "getCurrentTime";

    public long getCurrentTime()
    {
        return getCurrentTime(null, false);
    }

    public long getCurrentTime(java.util.Map<String, String> __ctx)
    {
        return getCurrentTime(__ctx, true);
    }

    private long getCurrentTime(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getCurrentTime", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getCurrentTime");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getCurrentTime(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getCurrentTime()
    {
        return begin_getCurrentTime(null, false, null);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx)
    {
        return begin_getCurrentTime(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getCurrentTime(Ice.Callback __cb)
    {
        return begin_getCurrentTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCurrentTime(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(Callback_MoniCAIce_getCurrentTime __cb)
    {
        return begin_getCurrentTime(null, false, __cb);
    }

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getCurrentTime __cb)
    {
        return begin_getCurrentTime(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCurrentTime_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCurrentTime_name, __cb);
        try
        {
            __result.__prepare(__getCurrentTime_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public long end_getCurrentTime(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getCurrentTime_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            long __ret;
            __ret = __is.readLong();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getData_name = "getData";

    public PointDataIce[] getData(String[] names)
    {
        return getData(names, null, false);
    }

    public PointDataIce[] getData(String[] names, java.util.Map<String, String> __ctx)
    {
        return getData(names, __ctx, true);
    }

    private PointDataIce[] getData(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getData");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getData(names, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getData(String[] names)
    {
        return begin_getData(names, null, false, null);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx)
    {
        return begin_getData(names, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getData(String[] names, Ice.Callback __cb)
    {
        return begin_getData(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getData(names, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, Callback_MoniCAIce_getData __cb)
    {
        return begin_getData(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getData __cb)
    {
        return begin_getData(names, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getData_name, __cb);
        try
        {
            __result.__prepare(__getData_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDataIce[] end_getData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDataIce[] __ret;
            __ret = pointdatasetHelper.read(__is);
            __is.readPendingObjects();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getEncryptionInfo_name = "getEncryptionInfo";

    public String[] getEncryptionInfo()
    {
        return getEncryptionInfo(null, false);
    }

    public String[] getEncryptionInfo(java.util.Map<String, String> __ctx)
    {
        return getEncryptionInfo(__ctx, true);
    }

    private String[] getEncryptionInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getEncryptionInfo", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getEncryptionInfo");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getEncryptionInfo(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getEncryptionInfo()
    {
        return begin_getEncryptionInfo(null, false, null);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getEncryptionInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(Ice.Callback __cb)
    {
        return begin_getEncryptionInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getEncryptionInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(Callback_MoniCAIce_getEncryptionInfo __cb)
    {
        return begin_getEncryptionInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getEncryptionInfo __cb)
    {
        return begin_getEncryptionInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getEncryptionInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getEncryptionInfo_name, __cb);
        try
        {
            __result.__prepare(__getEncryptionInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String[] end_getEncryptionInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getEncryptionInfo_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String[] __ret;
            __ret = stringarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getLeapSeconds_name = "getLeapSeconds";

    public dUTCEntry[] getLeapSeconds()
    {
        return getLeapSeconds(null, false);
    }

    public dUTCEntry[] getLeapSeconds(java.util.Map<String, String> __ctx)
    {
        return getLeapSeconds(__ctx, true);
    }

    private dUTCEntry[] getLeapSeconds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getLeapSeconds", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getLeapSeconds");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getLeapSeconds(__ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getLeapSeconds()
    {
        return begin_getLeapSeconds(null, false, null);
    }

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx)
    {
        return begin_getLeapSeconds(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getLeapSeconds(Ice.Callback __cb)
    {
        return begin_getLeapSeconds(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLeapSeconds(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getLeapSeconds(Callback_MoniCAIce_getLeapSeconds __cb)
    {
        return begin_getLeapSeconds(null, false, __cb);
    }

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getLeapSeconds __cb)
    {
        return begin_getLeapSeconds(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLeapSeconds_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLeapSeconds_name, __cb);
        try
        {
            __result.__prepare(__getLeapSeconds_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public dUTCEntry[] end_getLeapSeconds(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLeapSeconds_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            dUTCEntry[] __ret;
            __ret = dutcarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __getPoints_name = "getPoints";

    public PointDescriptionIce[] getPoints(String[] names)
    {
        return getPoints(names, null, false);
    }

    public PointDescriptionIce[] getPoints(String[] names, java.util.Map<String, String> __ctx)
    {
        return getPoints(names, __ctx, true);
    }

    private PointDescriptionIce[] getPoints(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "getPoints", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("getPoints");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.getPoints(names, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_getPoints(String[] names)
    {
        return begin_getPoints(names, null, false, null);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx)
    {
        return begin_getPoints(names, __ctx, true, null);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, Ice.Callback __cb)
    {
        return begin_getPoints(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getPoints(names, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, Callback_MoniCAIce_getPoints __cb)
    {
        return begin_getPoints(names, null, false, __cb);
    }

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getPoints __cb)
    {
        return begin_getPoints(names, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getPoints_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getPoints_name, __cb);
        try
        {
            __result.__prepare(__getPoints_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public PointDescriptionIce[] end_getPoints(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getPoints_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            PointDescriptionIce[] __ret;
            __ret = pointarrayHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __setData_name = "setData";

    public boolean setData(String[] names, PointDataIce[] values, String username, String passwd)
    {
        return setData(names, values, username, passwd, null, false);
    }

    public boolean setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return setData(names, values, username, passwd, __ctx, true);
    }

    private boolean setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "setData", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("setData");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.setData(names, values, username, passwd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd)
    {
        return begin_setData(names, values, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_setData(names, values, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, Ice.Callback __cb)
    {
        return begin_setData(names, values, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setData(names, values, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, Callback_MoniCAIce_setData __cb)
    {
        return begin_setData(names, values, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_setData __cb)
    {
        return begin_setData(names, values, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setData_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setData_name, __cb);
        try
        {
            __result.__prepare(__setData_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, names);
            pointdatasetHelper.write(__os, values);
            __os.writeString(username);
            __os.writeString(passwd);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_setData(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __setData_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __shelveAlarms_name = "shelveAlarms";

    public boolean shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd)
    {
        return shelveAlarms(pointnames, shelve, username, passwd, null, false);
    }

    public boolean shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return shelveAlarms(pointnames, shelve, username, passwd, __ctx, true);
    }

    private boolean shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "shelveAlarms", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("shelveAlarms");
                    __delBase = __getDelegate(false);
                    _MoniCAIceDel __del = (_MoniCAIceDel)__delBase;
                    return __del.shelveAlarms(pointnames, shelve, username, passwd, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, null, false, null);
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, __ctx, true, null);
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, Ice.Callback __cb)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, Callback_MoniCAIce_shelveAlarms __cb)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, null, false, __cb);
    }

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_shelveAlarms __cb)
    {
        return begin_shelveAlarms(pointnames, shelve, username, passwd, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__shelveAlarms_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __shelveAlarms_name, __cb);
        try
        {
            __result.__prepare(__shelveAlarms_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            stringarrayHelper.write(__os, pointnames);
            __os.writeBool(shelve);
            __os.writeString(username);
            __os.writeString(passwd);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_shelveAlarms(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __shelveAlarms_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static MoniCAIcePrx checkedCast(Ice.ObjectPrx __obj)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MoniCAIcePrx)
            {
                __d = (MoniCAIcePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MoniCAIcePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MoniCAIcePrx)
            {
                __d = (MoniCAIcePrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MoniCAIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MoniCAIcePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MoniCAIcePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof MoniCAIcePrx)
            {
                __d = (MoniCAIcePrx)__obj;
            }
            else
            {
                MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MoniCAIcePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MoniCAIcePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MoniCAIcePrxHelper __h = new MoniCAIcePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::atnf::atoms::mon::comms::MoniCAIce"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _MoniCAIceDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _MoniCAIceDelD();
    }

    public static void __write(IceInternal.BasicStream __os, MoniCAIcePrx v)
    {
        __os.writeProxy(v);
    }

    public static MoniCAIcePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MoniCAIcePrxHelper result = new MoniCAIcePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
