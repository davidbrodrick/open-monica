// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package atnf.atoms.mon.comms;

public class PointDescriptionIce implements java.lang.Cloneable, java.io.Serializable
{
    public String[] names;

    public String source;

    public String description;

    public String shortdescription;

    public String units;

    public boolean enabled;

    public String[] inputtransactions;

    public String[] outputtransactions;

    public String[] translations;

    public String[] limits;

    public String[] archivepolicies;

    public long period;

    public int archivelongevity;

    public PointDescriptionIce()
    {
    }

    public PointDescriptionIce(String[] names, String source, String description, String shortdescription, String units, boolean enabled, String[] inputtransactions, String[] outputtransactions, String[] translations, String[] limits, String[] archivepolicies, long period, int archivelongevity)
    {
        this.names = names;
        this.source = source;
        this.description = description;
        this.shortdescription = shortdescription;
        this.units = units;
        this.enabled = enabled;
        this.inputtransactions = inputtransactions;
        this.outputtransactions = outputtransactions;
        this.translations = translations;
        this.limits = limits;
        this.archivepolicies = archivepolicies;
        this.period = period;
        this.archivelongevity = archivelongevity;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        PointDescriptionIce _r = null;
        if(rhs instanceof PointDescriptionIce)
        {
            _r = (PointDescriptionIce)rhs;
        }

        if(_r != null)
        {
            if(!java.util.Arrays.equals(names, _r.names))
            {
                return false;
            }
            if(source != _r.source)
            {
                if(source == null || _r.source == null || !source.equals(_r.source))
                {
                    return false;
                }
            }
            if(description != _r.description)
            {
                if(description == null || _r.description == null || !description.equals(_r.description))
                {
                    return false;
                }
            }
            if(shortdescription != _r.shortdescription)
            {
                if(shortdescription == null || _r.shortdescription == null || !shortdescription.equals(_r.shortdescription))
                {
                    return false;
                }
            }
            if(units != _r.units)
            {
                if(units == null || _r.units == null || !units.equals(_r.units))
                {
                    return false;
                }
            }
            if(enabled != _r.enabled)
            {
                return false;
            }
            if(!java.util.Arrays.equals(inputtransactions, _r.inputtransactions))
            {
                return false;
            }
            if(!java.util.Arrays.equals(outputtransactions, _r.outputtransactions))
            {
                return false;
            }
            if(!java.util.Arrays.equals(translations, _r.translations))
            {
                return false;
            }
            if(!java.util.Arrays.equals(limits, _r.limits))
            {
                return false;
            }
            if(!java.util.Arrays.equals(archivepolicies, _r.archivepolicies))
            {
                return false;
            }
            if(period != _r.period)
            {
                return false;
            }
            if(archivelongevity != _r.archivelongevity)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::atnf::atoms::mon::comms::PointDescriptionIce");
        __h = IceInternal.HashUtil.hashAdd(__h, names);
        __h = IceInternal.HashUtil.hashAdd(__h, source);
        __h = IceInternal.HashUtil.hashAdd(__h, description);
        __h = IceInternal.HashUtil.hashAdd(__h, shortdescription);
        __h = IceInternal.HashUtil.hashAdd(__h, units);
        __h = IceInternal.HashUtil.hashAdd(__h, enabled);
        __h = IceInternal.HashUtil.hashAdd(__h, inputtransactions);
        __h = IceInternal.HashUtil.hashAdd(__h, outputtransactions);
        __h = IceInternal.HashUtil.hashAdd(__h, translations);
        __h = IceInternal.HashUtil.hashAdd(__h, limits);
        __h = IceInternal.HashUtil.hashAdd(__h, archivepolicies);
        __h = IceInternal.HashUtil.hashAdd(__h, period);
        __h = IceInternal.HashUtil.hashAdd(__h, archivelongevity);
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        stringarrayHelper.write(__os, names);
        __os.writeString(source);
        __os.writeString(description);
        __os.writeString(shortdescription);
        __os.writeString(units);
        __os.writeBool(enabled);
        stringarrayHelper.write(__os, inputtransactions);
        stringarrayHelper.write(__os, outputtransactions);
        stringarrayHelper.write(__os, translations);
        stringarrayHelper.write(__os, limits);
        stringarrayHelper.write(__os, archivepolicies);
        __os.writeLong(period);
        __os.writeInt(archivelongevity);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        names = stringarrayHelper.read(__is);
        source = __is.readString();
        description = __is.readString();
        shortdescription = __is.readString();
        units = __is.readString();
        enabled = __is.readBool();
        inputtransactions = stringarrayHelper.read(__is);
        outputtransactions = stringarrayHelper.read(__is);
        translations = stringarrayHelper.read(__is);
        limits = stringarrayHelper.read(__is);
        archivepolicies = stringarrayHelper.read(__is);
        period = __is.readLong();
        archivelongevity = __is.readInt();
    }

    public static final long serialVersionUID = 9045158631905744961L;
}
