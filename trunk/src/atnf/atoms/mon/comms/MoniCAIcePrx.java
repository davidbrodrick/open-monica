// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.0
//
// <auto-generated>
//
// Generated from file `MoniCA.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package atnf.atoms.mon.comms;

public interface MoniCAIcePrx extends Ice.ObjectPrx
{
    public String[] getAllPointNames();

    public String[] getAllPointNames(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointNames();

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointNames(Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointNames(Callback_MoniCAIce_getAllPointNames __cb);

    public Ice.AsyncResult begin_getAllPointNames(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointNames __cb);

    public String[] end_getAllPointNames(Ice.AsyncResult __result);

    public String[] getAllPointNamesChunk(int start, int num);

    public String[] getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, Callback_MoniCAIce_getAllPointNamesChunk __cb);

    public Ice.AsyncResult begin_getAllPointNamesChunk(int start, int num, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointNamesChunk __cb);

    public String[] end_getAllPointNamesChunk(Ice.AsyncResult __result);

    public PointDescriptionIce[] getPoints(String[] names);

    public PointDescriptionIce[] getPoints(String[] names, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getPoints(String[] names);

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getPoints(String[] names, Ice.Callback __cb);

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getPoints(String[] names, Callback_MoniCAIce_getPoints __cb);

    public Ice.AsyncResult begin_getPoints(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getPoints __cb);

    public PointDescriptionIce[] end_getPoints(Ice.AsyncResult __result);

    public PointDescriptionIce[] getAllPoints();

    public PointDescriptionIce[] getAllPoints(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPoints();

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPoints(Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPoints(Callback_MoniCAIce_getAllPoints __cb);

    public Ice.AsyncResult begin_getAllPoints(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPoints __cb);

    public PointDescriptionIce[] end_getAllPoints(Ice.AsyncResult __result);

    public PointDescriptionIce[] getAllPointsChunk(int start, int num);

    public PointDescriptionIce[] getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, Callback_MoniCAIce_getAllPointsChunk __cb);

    public Ice.AsyncResult begin_getAllPointsChunk(int start, int num, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllPointsChunk __cb);

    public PointDescriptionIce[] end_getAllPointsChunk(Ice.AsyncResult __result);

    public boolean addPoints(PointDescriptionIce[] newpoints, String username, String passwd);

    public boolean addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Ice.Callback __cb);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, Callback_MoniCAIce_addPoints __cb);

    public Ice.AsyncResult begin_addPoints(PointDescriptionIce[] newpoints, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addPoints __cb);

    public boolean end_addPoints(Ice.AsyncResult __result);

    public PointDataIce[][] getArchiveData(String[] names, long start, long end, long maxsamples);

    public PointDataIce[][] getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Ice.Callback __cb);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, Callback_MoniCAIce_getArchiveData __cb);

    public Ice.AsyncResult begin_getArchiveData(String[] names, long start, long end, long maxsamples, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getArchiveData __cb);

    public PointDataIce[][] end_getArchiveData(Ice.AsyncResult __result);

    public PointDataIce[] getData(String[] names);

    public PointDataIce[] getData(String[] names, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getData(String[] names);

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getData(String[] names, Ice.Callback __cb);

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getData(String[] names, Callback_MoniCAIce_getData __cb);

    public Ice.AsyncResult begin_getData(String[] names, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getData __cb);

    public PointDataIce[] end_getData(Ice.AsyncResult __result);

    public PointDataIce[] getBefore(String[] names, long t);

    public PointDataIce[] getBefore(String[] names, long t, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBefore(String[] names, long t);

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getBefore(String[] names, long t, Ice.Callback __cb);

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getBefore(String[] names, long t, Callback_MoniCAIce_getBefore __cb);

    public Ice.AsyncResult begin_getBefore(String[] names, long t, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getBefore __cb);

    public PointDataIce[] end_getBefore(Ice.AsyncResult __result);

    public PointDataIce[] getAfter(String[] names, long t);

    public PointDataIce[] getAfter(String[] names, long t, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAfter(String[] names, long t);

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAfter(String[] names, long t, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAfter(String[] names, long t, Callback_MoniCAIce_getAfter __cb);

    public Ice.AsyncResult begin_getAfter(String[] names, long t, java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAfter __cb);

    public PointDataIce[] end_getAfter(Ice.AsyncResult __result);

    public boolean setData(String[] names, PointDataIce[] values, String username, String passwd);

    public boolean setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, Ice.Callback __cb);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, Callback_MoniCAIce_setData __cb);

    public Ice.AsyncResult begin_setData(String[] names, PointDataIce[] values, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_setData __cb);

    public boolean end_setData(Ice.AsyncResult __result);

    public String[] getAllSetups();

    public String[] getAllSetups(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllSetups();

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllSetups(Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllSetups(Callback_MoniCAIce_getAllSetups __cb);

    public Ice.AsyncResult begin_getAllSetups(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllSetups __cb);

    public String[] end_getAllSetups(Ice.AsyncResult __result);

    public boolean addSetup(String setup, String username, String passwd);

    public boolean addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Ice.Callback __cb);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, Callback_MoniCAIce_addSetup __cb);

    public Ice.AsyncResult begin_addSetup(String setup, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_addSetup __cb);

    public boolean end_addSetup(Ice.AsyncResult __result);

    public AlarmIce[] getAllAlarms();

    public AlarmIce[] getAllAlarms(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllAlarms();

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getAllAlarms(Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getAllAlarms(Callback_MoniCAIce_getAllAlarms __cb);

    public Ice.AsyncResult begin_getAllAlarms(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getAllAlarms __cb);

    public AlarmIce[] end_getAllAlarms(Ice.AsyncResult __result);

    public AlarmIce[] getCurrentAlarms();

    public AlarmIce[] getCurrentAlarms(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCurrentAlarms();

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCurrentAlarms(Ice.Callback __cb);

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCurrentAlarms(Callback_MoniCAIce_getCurrentAlarms __cb);

    public Ice.AsyncResult begin_getCurrentAlarms(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getCurrentAlarms __cb);

    public AlarmIce[] end_getCurrentAlarms(Ice.AsyncResult __result);

    public boolean acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd);

    public boolean acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, Ice.Callback __cb);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, Callback_MoniCAIce_acknowledgeAlarms __cb);

    public Ice.AsyncResult begin_acknowledgeAlarms(String[] pointnames, boolean ack, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_acknowledgeAlarms __cb);

    public boolean end_acknowledgeAlarms(Ice.AsyncResult __result);

    public boolean shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd);

    public boolean shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, Ice.Callback __cb);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, Callback_MoniCAIce_shelveAlarms __cb);

    public Ice.AsyncResult begin_shelveAlarms(String[] pointnames, boolean shelve, String username, String passwd, java.util.Map<String, String> __ctx, Callback_MoniCAIce_shelveAlarms __cb);

    public boolean end_shelveAlarms(Ice.AsyncResult __result);

    public String[] getEncryptionInfo();

    public String[] getEncryptionInfo(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getEncryptionInfo();

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getEncryptionInfo(Ice.Callback __cb);

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getEncryptionInfo(Callback_MoniCAIce_getEncryptionInfo __cb);

    public Ice.AsyncResult begin_getEncryptionInfo(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getEncryptionInfo __cb);

    public String[] end_getEncryptionInfo(Ice.AsyncResult __result);

    public long getCurrentTime();

    public long getCurrentTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCurrentTime();

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getCurrentTime(Ice.Callback __cb);

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getCurrentTime(Callback_MoniCAIce_getCurrentTime __cb);

    public Ice.AsyncResult begin_getCurrentTime(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getCurrentTime __cb);

    public long end_getCurrentTime(Ice.AsyncResult __result);

    public dUTCEntry[] getLeapSeconds();

    public dUTCEntry[] getLeapSeconds(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getLeapSeconds();

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_getLeapSeconds(Ice.Callback __cb);

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_getLeapSeconds(Callback_MoniCAIce_getLeapSeconds __cb);

    public Ice.AsyncResult begin_getLeapSeconds(java.util.Map<String, String> __ctx, Callback_MoniCAIce_getLeapSeconds __cb);

    public dUTCEntry[] end_getLeapSeconds(Ice.AsyncResult __result);
}
