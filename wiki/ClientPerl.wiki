#summary MoniCA query Perl module

= Introduction =

The Perl module `MoniCA.pm` makes it possible to quickly and easily query a MoniCA
server through the ASCII interface with a Perl program. This module takes care of:
  * time conversion (BAT to other formats)
  * response handling, giving back a handy Perl hash for each data point returned
  * long time range queries, where the MoniCA server may force it to be made in more than one query

This Perl module was written by Chris Phillips, and extended by Jamie Stevens.

= Details =

== Requirements & Installation ==

Using this Perl module also requires that you install the `Astro::Time` Perl module from CPAN:
http://search.cpan.org/~cphil/Astro-0.73/Astro/Time.pm

Installing the `MoniCA.pm` module is easy. Simply change into the `clientlibs/perl` directory, and give the following commands:
{{{
perl Makefile.PL
make
sudo make install
}}}

Providing that it finds all its prerequisites, you will now be able to use the `MoniCA.pm` module. If you see errors about missing modules, use the CPAN search to find and install them.

== Usage ==

To use this Perl module, include the following code at the top of your Perl program:
{{{
use Astro::Time;
use ATNF::MoniCA;
}}}

This will allow you to use the functions provided by the `MoniCA.pm' module.

Let's look at an example Perl program that queries a MoniCA server.
{{{
use strict;
use Astro::Time;
use ATNF::MoniCA;

my $mon=monconnect("monserver.domain.com");
if (!defined $mon){
  print "Could not connect to monitor server monserver.domain.com\n";
  exit;
}

my @monitor_points=("site.environment.weather.Temperature","site.environment.weather.Humidity");
my @point_vals=monpoll($mon,@monitor_points);
for (my $i=0;$i<=$#point_vals;$i++){
  print "point ".$point_vals[$i]->point." has value ".$point_vals[$i]->val." at time ".bat2cal($point_vals[$i]->bat,0)."\n";
}
}}}

From this example you can see how to connect to a specified monitoring server:
{{{
my $mon=monconnect("monserver.domain.com");
}}}

The `$mon` that is returned from this is a handle to the MoniCA server through its ASCII interface, and will need to be passed to whatever routines you later use to get values for monitoring points. If `$mon` comes back as "undefined", then the MoniCA server could not be contacted by the `monconnect` routine; you should check that the server is running, and that you have access to its ASCII port from the machine you're running your Perl code on.

The example then shows how to query the server for the latest values for a number of points, using the `monpoll` routine:
{{{
my @point_vals=monpoll($mon,@monitor_points);
}}}

As you can see, you call `monpoll` with the MoniCA server handle `$mon`, and with a list of monitoring point names `@monitor_points`. For our example, we have set:
{{{
my @monitor_points=("site.environment.weather.Temperature","site.environment.weather.Humidity");
}}}

You may specify as many point names you want to this command. If you only want the latest value of one point, you can alter your call to:
{{{
my $monitor_point="site.environment.weather.Temperature";
my $point_val=monpoll($mon,$monitor_point);
}}}

What is returned is a list of `MonPoint` objects, each of which has three properties:
  * `point`: the name of the monitoring point
  * `bat`: the BAT time of the returned value
  * `val`: the value of this monitoring point

So the last part of the example can be seen to loop over all the returned `MonPoint`s and print out all the information they contain:
{{{
for (my $i=0;$i<=$#point_vals;$i++){
  print "point ".$point_vals[$i]->point." has value ".$point_vals[$i]->val." at time ".bat2cal($point_vals[$i]->bat,0)."\n";
}
}}}

Let's run the program, and see the output: