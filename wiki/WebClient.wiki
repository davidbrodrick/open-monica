#summary Client for viewing MoniCA data from a web page.
#labels Phase-Implementation

= Introduction =

Many users will find it more convenient to view data from your MoniCA server on a web page. The open-monica distribution comes with a set of Javascript libraries to make it easy to build web pages that can display real-time MoniCA data. Alternatively, you can use the pre-built MoniCA frontpage.

= Installation =

== File Locations ==

=== Required Files ===

On your webserver, you will first need to install the Perl client so that it can be called by the server-side MoniCA query script.

You should then copy the `/clientlibs/web/cgi-bin/monicainterface_json.pl` file to your webserver's `cgi-bin` directory.

Finally, copy the `/clientlibs/web/htdocs/monica_web_v2.src.js` to your desired directory on your webserver.

Optionally, you can install the Dojo toolkit onto your webserver, from http://dojotoolkit.org/. The open-monica Javascript library is built upon version 1.6 of the Dojo toolkit, and does not use the AMD functionality of version 1.7. Since version 1.7 is backwards compatible, you can still install it.

=== Standard MoniCA HTML front page ===

The included MoniCA frontpage depends on the following tools in addition to those listed above:
  * the [http://www.highcharts.com/ Highcharts plotting library]
  * the [http://jquery.com/ jQuery toolkit] (required by Highcharts)

You can download the latest Highcharts plotting library from [http://www.highcharts.com their homepage.] Ideally, create a directory `js` in the root HTML directory of your HTTP server, and ensure that it contains a link to, or direct copy of, the `highcharts.js` file, such that the address `http://www.yourserver.com/js/highcharts.js` would find the script.

Then copy the files `/clientlibs/web/htdocs/monica_front.*` to your desired location on the webserver. You will then need to do some configuration in the `monica_front.js` file.

= Programming =

== API ==

This section describes the MoniCA Javascript API, which is located in the file `monica_web_v2.src.js`.

The API makes available three objects.

=== Object `monicaServer` ===

==== Constructor ====

{{{
var server = monicaServer(spec, my);
}}}

The constructor function takes two arguments, both of which are optional.
  * `spec` is an object that configures the server. It can have the following properties:
    * `serverName`: the hostname of the MoniCA server (default `monhost-nar`).
    * `protocol`: the protocol to use for connections to the webserver (default `http`).
    * `webserverName`: the hostname of the webserver (default `www.narrabri.atnf.csiro.au`).
    * `webserverPath`: the location of the JSON MoniCA query script (default `cgi-bin/obstools/web_monica/monicainterface_json.pl`).
    * `updateInterval`: the minimum time between queries to the MoniCA server, in milliseconds (default `10000`).
  * `my` is any object that you would like the `monicaServer` object to have access to. In this way, you can extend the server with new methods that can access this object.

==== Public Methods ====

===== connect =====

{{{
var connectionDeferred = server.connect();
}}}

Before you can start obtaining MoniCA data from a server, you must tell the `monicaServer` object to connect with this method. It returns a Dojo `Deferred` object that will be resolved when the connection is established. You should then point the `Deferred` to a function you want to execute once the connection is established, eg:

{{{
var connectionEstablished = function(serverObj) {
  // This routine sets up all the MoniCA points that will appear on
  // this page.
  console.log(serverObj.server); // The name of the server that has connected.
}

connectionDeferred.then(connectionEstablished);
}}}

The connection can be simplified for brevity:
{{{
server.connect().then(connectionEstablished);
}}}

Use of the Dojo `Deferred` object to detect when the connection is established is the preferred method. However, you may also choose instead to use the Dojo pub/sub interface. When the MoniCA connection is established, the `monicaServer` object will publish the connection to the `connection` channel. All you need to do is setup a listener for this channel.

{{{
dojo.subscribe('connection', connectionEstablished);
}}}

The same information is passed to the function regardless of which method is chosen. The difference is that if you set up multiple `monicaServer` objects, the `connection` subscription will be triggered for every server, whereas the you will get a separate `Deferred` for each server that can be directed individually to different functions.

For example, using the `connection` channel:
{{{
var narrabriConnection = function() {
  // Do things for a connection to the Narrabri MoniCA server.
}

var parkesConnection = function() {
  // Do things for a connection to the Parkes MoniCA server.
}

var connectionEstablished = function(serverObj) {
  // Which server has connected?
  if (serverObj.server === 'monhost-nar') {
    narrabriConnection();
  } else if (serverObj.server === 'monhost-pks') {
    parkesConnection();
  }
}

var narMonica = monicaServer({ serverName: 'monhost-nar' });
var pksMonica = monicaServer({ serverName: 'monhost-pks' });

// The subscription listener should be setup before the connection
// method is called so we don't miss the signal.
dojo.subscribe('connection', connectionEstablished);

narMonica.connect();
pksMonica.connect();
}}}

Whereas, using Dojo `Deferred` objects:

{{{
var narrabriConnection = function(serverObj) {
  // Do things for a connection to the Narrabri MoniCA server.
}

var parkesConnection = function(serverObj) {
  // Do things for a connection to the Parkes MoniCA server.
}

var narMonica = monicaServer({ serverName: 'monhost-nar' });
var pksMonica = monicaServer({ serverName: 'monhost-pks' });

narMonica.connect().then(narrabriConnection);
pksMonica.connect().then(parkesConnection);
}}}

===== pointsList =====

{{{
var availablePoints = server.pointsList();
}}}

This method returns an `Array` containing a `String` for each MoniCA point name available on the server you have connected to.

Example:
{{{
var connectionEstablished(serverObj) {
  // Print out each point name to the web page.
  var pointNames = server.pointsList();
  for (var i = 0; i < pointNames.length; i++) {
    dojo.place('<span>point ' + (i + 1) + ' = ' +
      pointNames[i] + '</span>', dojo.body());
  }
}

var server = monicaServer({ serverName: 'monhost-nar' });
server.connect().then(connectionEstablished);
}}}

===== isPoint =====

{{{
var pointAvailable = server.isPoint(pointName);
}}}

This method takes a `String` `pointName` and returns `true` if `pointName` is a point available on the server, and `false` otherwise.

===== getServerName =====

{{{
var serverName = server.getServerName();
}}}

This method returns a `String` representation of the name of the server that is connected.

Example:
{{{
var connectionEstablished() {
  // Print out the server name to the web page, which should be 'monhost-nar'
  dojo.place('<span> server = ' +
    server.getServerName() + '</span>', dojo.body());
}

var server = monicaServer({ serverName: 'monhost-nar' });
server.connect().then(connectionEstablished);
}}}

===== addPoints =====

{{{
var pointReferences = server.addPoints(pointsList);
}}}