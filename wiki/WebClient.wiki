#summary Client for viewing MoniCA data from a web page.
#labels Phase-Implementation

= Introduction =

Many users will find it more convenient to view data from your MoniCA server on a web page. The open-monica distribution comes with a set of Javascript libraries to make it easy to build web pages that can display real-time MoniCA data. Alternatively, you can use the pre-built MoniCA frontpage.

= Installation =

== File Locations ==

=== Required Files ===

On your webserver, you will first need to install the Perl client so that it can be called by the server-side MoniCA query script.

You should then copy the `/clientlibs/web/cgi-bin/monicainterface_json.pl` file to your webserver's `cgi-bin` directory.

Finally, copy the `/clientlibs/web/htdocs/monica_web_v2.src.js` to your desired directory on your webserver.

Optionally, you can install the Dojo toolkit onto your webserver, from http://dojotoolkit.org/. The open-monica Javascript library is built upon version 1.6 of the Dojo toolkit, and does not use the AMD functionality of version 1.7. Since version 1.7 is backwards compatible, you can still install it.

=== Standard MoniCA HTML front page ===

The included MoniCA frontpage depends on the following tools in addition to those listed above:
  * the [http://www.highcharts.com/ Highcharts plotting library]
  * the [http://jquery.com/ jQuery toolkit] (required by Highcharts)

You can download the latest Highcharts plotting library from [http://www.highcharts.com their homepage.] Ideally, create a directory `js` in the root HTML directory of your HTTP server, and ensure that it contains a link to, or direct copy of, the `highcharts.js` file, such that the address `http://www.yourserver.com/js/highcharts.js` would find the script.

Then copy the files `/clientlibs/web/htdocs/monica_front.*` to your desired location on the webserver. You will then need to do some configuration in the `monica_front.js` file.

= Programming =

== API ==

This section describes the MoniCA Javascript API, which is located in the file `monica_web_v2.src.js`.

The API makes available three objects.

=== Object `monicaServer` ===

==== Constructor ====

{{{
var server = monicaServer(spec, my);
}}}

The constructor function takes two arguments, both of which are optional.
  * `spec` is an object that configures the server. It can have the following properties:
    * `serverName`: the hostname of the MoniCA server (default `monhost-nar`).
    * `protocol`: the protocol to use for connections to the webserver (default `http`).
    * `webserverName`: the hostname of the webserver (default `www.narrabri.atnf.csiro.au`).
    * `webserverPath`: the location of the JSON MoniCA query script (default `cgi-bin/obstools/web_monica/monicainterface_json.pl`).
    * `updateInterval`: the minimum time between queries to the MoniCA server, in milliseconds (default `10000`).
  * `my` is any object that you would like the `monicaServer` object to have access to. In this way, you can extend the server with new methods that can access this object.

==== Public Methods ====

===== connect =====

{{{
var connectionDeferred = server.connect();
}}}

Before you can start obtaining MoniCA data from a server, you must tell the `monicaServer` object to connect with this method. It returns a Dojo `Deferred` object that will be resolved when the connection is established. You should then point the `Deferred` to a function you want to execute once the connection is established, eg:

{{{
var connectionEstablished = function(serverObj) {
  // This routine sets up all the MoniCA points that will appear on
  // this page.
  console.log(serverObj.server); // The name of the server that has connected.
}

connectionDeferred.then(connectionEstablished);
}}}

The connection can be simplified for brevity:
{{{
server.connect().then(connectionEstablished);
}}}

Use of the Dojo `Deferred` object to detect when the connection is established is the preferred method. However, you may also choose instead to use the Dojo pub/sub interface. When the MoniCA connection is established, the `monicaServer` object will publish the connection to the `connection` channel. All you need to do is setup a listener for this channel.

{{{
dojo.subscribe('connection', connectionEstablished);
}}}

The same information is passed to the function regardless of which method is chosen. The difference is that if you set up multiple `monicaServer` objects, the `connection` subscription will be triggered for every server, whereas the you will get a separate `Deferred` for each server that can be directed individually to different functions.

For example, using the `connection` channel:
{{{
var narrabriConnection = function() {
  // Do things for a connection to the Narrabri MoniCA server.
}

var parkesConnection = function() {
  // Do things for a connection to the Parkes MoniCA server.
}

var connectionEstablished = function(serverObj) {
  // Which server has connected?
  if (serverObj.server === 'monhost-nar') {
    narrabriConnection();
  } else if (serverObj.server === 'monhost-pks') {
    parkesConnection();
  }
}

var narMonica = monicaServer({ serverName: 'monhost-nar' });
var pksMonica = monicaServer({ serverName: 'monhost-pks' });

// The subscription listener should be setup before the connection
// method is called so we don't miss the signal.
dojo.subscribe('connection', connectionEstablished);

narMonica.connect();
pksMonica.connect();
}}}

Whereas, using Dojo `Deferred` objects:

{{{
var narrabriConnection = function(serverObj) {
  // Do things for a connection to the Narrabri MoniCA server.
}

var parkesConnection = function(serverObj) {
  // Do things for a connection to the Parkes MoniCA server.
}

var narMonica = monicaServer({ serverName: 'monhost-nar' });
var pksMonica = monicaServer({ serverName: 'monhost-pks' });

narMonica.connect().then(narrabriConnection);
pksMonica.connect().then(parkesConnection);
}}}

===== pointsList =====

{{{
var availablePoints = server.pointsList();
}}}

This method returns an `Array` containing a `String` for each MoniCA point name available on the server you have connected to.

Example:
{{{
var connectionEstablished(serverObj) {
  // Print out each point name to the web page.
  var pointNames = server.pointsList();
  for (var i = 0; i < pointNames.length; i++) {
    dojo.place('<span>point ' + (i + 1) + ' = ' +
      pointNames[i] + '</span>', dojo.body());
  }
}

var server = monicaServer({ serverName: 'monhost-nar' });
server.connect().then(connectionEstablished);
}}}

===== isPoint =====

{{{
var pointAvailable = server.isPoint(pointName);
}}}

This method takes a `String` `pointName` and returns `true` if `pointName` is a point available on the server, and `false` otherwise.

===== getServerName =====

{{{
var serverName = server.getServerName();
}}}

This method returns a `String` representation of the name of the server that is connected.

Example:
{{{
var connectionEstablished() {
  // Print out the server name to the web page, which should be 'monhost-nar'
  dojo.place('<span> server = ' +
    server.getServerName() + '</span>', dojo.body());
}

var server = monicaServer({ serverName: 'monhost-nar' });
server.connect().then(connectionEstablished);
}}}

===== addPoints =====

{{{
var pointReferences = server.addPoints(pointsList);
}}}

This method is used to tell the server to keep one or more MoniCA points up-to-date. For each point passed to this method that exists on the server, a `monicaPoint` object that can be used to query that point's details and value.

Example:
{{{
var connectionEstablished = function() {
  var pointsRequired = [ 'ca01.misc.station', 'ca02.misc.station' ];
  var pointReferences = server.addPoints(pointsRequired);
}
}}}

===== getPoints =====

{{{
var pointReferences = server.getPoints(pointsList);
}}}

This method is used to get references to the `monicaPoint` objects for points that have previously been added with the `addPoints` method. The method can be passed either a single `String` for `pointsList`, or an array of `String`s. Each `String` should be the name of a MoniCA point that you want the reference for. The method will return either a single `monicaPoint` object, if it was passed a single `String`, or an array of `monicaPoint`s the same length of the `pointsList` array. For any point that isn't being handled by the server, a `null` value will be returned.

===== addTimeSeries =====

{{{
var seriesReference = server.addTimeSeries(seriesOptions);
}}}

This method makes the server keep track of a number of values for a particular point. The configuration of the time-series is passed through the `seriesOptions` object, that has the properties:
  * `pointName`: the name of the MoniCA point.
  * `timeSeriesOptions`: an object with the properties:
    * `startTime`: the time to start the series from, in the format `yyyy/mm/dd:HH:MM:SS`, or `-1` to make the series finish at the current time (the default).
    * `spanTime`: the time to cover with this series, in minutes (default 60).
    * `maxPoints`: the maximum number of points to keep from the time range (default 500).

This method returns a `monicaPoint` object that can be used to query the series' details and values.

Example:
{{{
// Setup to get the temperature on the site for the last 12 hours.
// Since temperature varies pretty slowly, we only need 100 points here.
var seriesOptions = {
  pointName: 'site.environment.weather.Temperature',
  timeSeriesOptions: {
    startTime: -1,
    spanTime: 720,
    maxPoints: 100
  }
}

var seriesReference = server.addTimeSeries(seriesOptions);
}}}

===== getDescriptions =====

{{{
server.getDescriptions(pointReference);
}}}

This method instructs the server to query MoniCA for the description for the point described by the `pointReference` object, which will have been returned from a call to `addPoints`, `getPoints` or `addTimeSeries`. If you want to get the server to get descriptions for all points that have been added but do not yet have descriptions, call this method without an argument.

This method is required and must be called for each added point and time-series, because the points will not update without a description.

Continuing on from our previous `addPoints` example:
{{{
var connectionEstablished = function() {
  var pointsRequired = [ 'ca01.misc.station', 'ca02.misc.station' ];
  var pointReferences = server.addPoints(pointsRequired);
  server.getDescriptions();
}
}}}

If you want to do something when the server has finished retrieving the descriptions, you may subscribe to the `description` channel. Again extending the example:
{{{
var descriptionsGathered = function(serverInfo) {
  // The serverInfo object we get here has one property:
  //   server: the name of the server.
  // And now we can do things knowing points on this server have
  // some info for their descriptions.
  console.log('Descriptions have been gathered.');
}

dojo.subscribe('description', descriptionsGathered);

var connectionEstablished = function() {
  var pointsRequired = [ 'ca01.misc.station', 'ca02.misc.station' ];
  var pointReferences = server.addPoints(pointsRequired);
  server.getDescriptions();
}
}}}


===== requestUpdate =====

{{{
server.requestUpdate(pointReferences);
}}}

This method instructs the server to query MoniCA for a new value for each point described by the `pointReferences` array that is passed to it. The server adds the points to its internal list of points requiring updates, but will not actually query MoniCA for these values until its next normal update time, or until a user calls the `immediateUpdate` method.

Users should not normally have to call this method, as the `monicaPoint` objects themselves will call it when they need to.

===== immediateUpdate =====

{{{
server.immediateUpdate();
}}}

This method makes the server immediately make a query to MoniCA to get values for all points that have requested an update.

Users should not normally have to call this method.

===== startUpdating =====

{{{
server.startUpdating();
}}}

This method instructs the server to begin a timer that will expire every `spec.updateInterval` milliseconds. Each time the timer expires, the server will query MoniCA for new values for each point that has requested an update. If no points have requested an update, no action will be taken by the server.

Users are advised to call this method as soon as the server resolves its loading `Deferred` or has published to the `connection` channel. For example:

{{{
var connectionEstablished = function(serverObj) {
  // We can safely start the server updating now.
  narMonica.startUpdating();
  // Do things for a connection to the MoniCA server.
}

var narMonica = monicaServer({ serverName: 'monhost-nar' });

narMonica.connect().then(connectionEstablished);
}}}

===== stopUpdating =====

{{{
server.stopUpdating();
}}}

This method stops the server's updating timer, thereby stopping the server from getting any new values for the points that it handles. All the points can still be queried and will return the last value it obtained from MoniCA.

===== getLoadingDeferred =====

{{{
var connectionDeferred = server.getLoadingDeferred();
}}}

This method allows you to get the Dojo `Deferred` object that will get resolved when the server has gotten the list of points from MoniCA. The normal way of getting this `Deferred` is from the `connect` method, but this method returns exactly the same value, if required.

=== Object `monicaPoint` ===

==== Constructor ====

{{{
var pointReference = monicaPoint(spec, my);
}}}

The constructor function takes two arguments, both of which are optional.

  * `spec` is an object that configures the point. It can have the following properties:
    * `pointName`: the MoniCA name for this point, as a `String`.
    * `isTimeSeries`: a `Boolean` indicating whether this point represents a time-series.
    * `timeSeriesOptions`: an object that specifies the options used to gather the time-series. Its properties are:
      * `startTime`: the time to start the series from, in the format `yyyy/mm/dd:HH:MM:SS`, or `-1` to make the series finish at the current time (the default).
      * `spanTime`: the time to cover with this series, in minutes (default 60).
      * `maxPoints`: the maximum number of points to keep from the time range (default 500).
  * `my` is any object that you would like the `monicaPoint` to have access to.

The user can make a new `monicaPoint` if they desire, but the constructor is usually only called by the `monicaServer` object when the user requests a new point or time-series. The `monicaPoint` will not work correctly unless the `my` argument is specified as the `monicaServer` object that will be responsible for updating it.

==== Public Methods ====

===== getPointDetails =====

{{{
var pointDetails = pointReference.getPointDetails();
}}}

This method gets the MoniCA name for the `pointReference` object, along with the description of the point and its units. This information is returned as an object with the properties:
  * `name`: the MoniCA point name.
  * `description`: the description for this point, from MoniCA.
  * `units`: the units for the values for this point, from MoniCA.

Example:
{{{
var pointDetails = pointReference.getPointDetails();
console.log('the point ' + pointDetails.name + ' is described ' +
  'as "' + pointDetails.description + '", with units ' +
  pointDetails.units);
}}}

===== hasDescription =====

{{{
var descriptionAvailable = pointReference.hasDescription();
}}}

This method returns a `Boolean` indication of whether MoniCA has supplied a description for this point. This is primarily used by the `monicaServer` object, but can be called by the user if desired.

===== setPointDetails =====

{{{
pointReference.setDetails(pointDetails);
}}}

This method is used to assign a description and units to the point, as well as the time between updates. These details are passed to this method through the `pointDetails` object which has the properties:
  * `description`: A plain-English description for what this point represents.
  * `units`: The units that the point values are in.
  * `updateTime`: The point will request an update every `updateTime` seconds.

This method is usually called by the `monicaServer` object after communicating with MoniCA after the user has executed the `getDescriptions` method. However, the user can override any of the MoniCA specifications for these details, but only if they call this method before executing `getDescriptions`, as this method will not override any of these details that have previously been set. You do not need to specify all of the details in a call to this method.

Calling this method also begins the update process, as long as the `updateTime` has been specified. Each `monicaPoint` has its own timer, and will request an update when it expires, after `updateTime` seconds.

For example, to set only the `updateTime` to 1 minute, and allow MoniCA to fill in the rest of the details:
{{{
var connectionEstablished = function() {
  // Add a point.
  var pointReference = server.addPoints([ 'site.environment.weather.Temperature' ]);
  pointReference[0].setDetails({
    'updateTime': 60
  });
  server.getDescriptions();
}

var server = monicaServer();
server.connect().then(connectionEstablished);
}}}

===== resetPointDetails =====

{{{
pointReference.resetPointDetails();
}}}

This method allows the user to reset the point details that they may have set, and ask MoniCA to set them again.

===== updateValue =====

===== setTimeSeriesValues =====

===== getTimeSeries =====

===== latestValue =====

===== addCallback =====

===== timeSeriesOptions =====

===== isTimeSeries =====

===== timeSeriesInitialised =====

===== timeRepresentation =====

===== stopUpdating =====

===== startUpdating =====