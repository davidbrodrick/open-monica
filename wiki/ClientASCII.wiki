#summary How to talk to the server's ASCII interface.

= Introduction =

This document describes the ASCII protocol for retrieving data from the monitor server. The strength of this ASCII interface is that it can be used from any programming language that is capable of exchanging ASCII text over a TCP socket. Java programmers should use [ClientJava this] document instead.

=Establishing the Connection=

The monitor server listens for ASCII-protocol connections on a specific TCP port (8051 by default).

You can test that the server is listening by using telnet to connect to the relevant host/port. eg: `telnet myserver 8051`

=Command Summary=

The following commands are currently recognised by the server:

  * *poll:* Request the current values for a set of monitor points.
  * *poll2:* Request the current values, units and limit checks for a set of monitor points.
  * *since:* Request all updated values since a specified time.
  * *between:* Request all archival values between two nominated times.
  * *names:* Request the names of all monitor points in the system.
  * *details:* Request meta-information about some monitor points.

Each command is outlined in further detail below.

NB: All timestamps used by the monitor server are binary atomic time (BAT) timestamps. These correspond to the number of microseconds since MJD=0. Hexadecimal notation is used, eg 0x1081fca424fe40

==poll==

The poll command asks the server to return the most-recent values for one or more monitor points. The syntax is straightforward - but ensure that you use newline characters that correspond to the new lines in the examples below (it doesn't matter if you use \n or \n\r though).

You need to send:
{{{
poll
[num_points]
[pointname1]
...
[pointnameN]
}}}

The server will respond with:
{{{
[pointname1]\t[BAT_timestamp]\t[value]
...
[pointnameN]\t[BAT_timestamp]\t[value]
}}}

Here is a real example where we request the value for a single monitor point:
{{{
poll
1
site.environment.weather.Temperature
site.environment.weather.Temperature 0x1081fca424fe40 33.8
}}}

If the server doesn't recognise one of the monitor point names you request, it will respond with a question mark "?" in place of the line for that monitor point.

==poll2==

Similar to the poll command except that the response from the server also includes the data units and a boolean indicating whether the current value is within acceptable limits or not.

You need to send:
{{{
poll2
[num_points]
[pointname1]
...
[pointnameN]
}}}

The server will respond with:
{{{
[pointname1]\t[BAT_timestamp]\t[value]\t[units]\t[limitOK]
...
[pointnameN]\t[BAT_timestamp]\t[value]\t[units]\t[limitOK]
}}}

Notes:
  * The units will be displayed as "?" if the monitor point does not have units defined.
  * The limit check will return true if the current value is okay, or false if the value is currently out of range.
  * If the server doesn't recognise one of the monitor point names you request, it will respond with a question mark "?" in place of the response for that monitor point.
  * If the monitor point name is valid but no data is available "?"s will be returned for each field in the response.

Here is a real example where we request the value for a single monitor point:
{{{
poll2
1
mpacc.cryo.LS.20K
mpacc.cryo.LS.20K 0x10b32b0a376290 22.0 K true
}}}

==since==

The since command returns all records, for a single monitor point, between the nominated time and the present. To make the request you first need to send the string "since" and then, on a new line, send the BAT timestamp for when you want the request to start and then the name of the monitor point.

For instance, the following is a valid request:
{{{
since
0x1065ab64134158 site.environment.weather.Temperature
}}}

The server will respond with:
{{{
[number_of_data_which_follow]
[timestamp1]\t[data1]
[timestamp2]\t[data2]
...
[timestampN]\t[dataN]
}}}

==between==

The between command is similar to the since command except that it returns all records, for a single monitor point, between two nominated times (whereas since returns all data between the specified time and the present).

The following shows a valid request and the reply from the server:
{{{
between
0x10820fbd8375c0 0x10820fbfe5cfc0 site.environment.weather.Temperature
5
0x10820fbd8375c0 33.9
0x10820fbe1c0c40 33.9
0x10820fbeb4a2c0 33.9
0x10820fbf4d3940 33.9
0x10820fbfe5cfc0 33.9
}}}

==names==

The names command asks the server to print the names of all monitor points known to the system. This can be useful for identifying which monitor points are currently available (normally this wouldn't change often, but the command might prove useful to someone).

To make the request simple print the string "names" on a line by itself:
names

The server will respond with:
{{{
[number_of_point_names_that_follow]
[pointname1]
...
[pointnameN]
}}}

==details==

The details command asks the server to send some meta-information about the specified monitor points. The format of the request is as follows:

{{{
details
[num_points]
[pointname1]
...
[pointnameN]
}}}

For each "pointname" you requested the system will respond with a line containing:
`[pointname]\t[sample_period]\t["units"]\t["description"]`
If a point name isn't recognised the server will respond with only "?" for the corresponding line of the response.

The sample period is in decimal seconds. NB, for some points the returned interval is only a rough guideline. The units and description are both delimited by "quotation marks".

Here is a complete example:
{{{
details
1
site.environment.weather.Temperature
site.environment.weather.Temperature 10.0 "C" "Temperature"
}}}